# -*- coding: utf-8 -*-
"""casedbased2_PM_Arjun

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDpzzHakAPrHJIn95M9q5osUrRVx2BlA

####CASE BASED 2

###Explorasi Data
"""

import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import seaborn as sns

missValue = "?"
df = pd.read_csv('water_treatment.csv', sep=",", na_values = missValue)
df

print("Ukuran Tabel :  ", df.shape)
print("Jumlah NULL : ", df.isnull().sum().sum())

df.describe()

df.info()



"""### Preprocessing




"""

#mengecek data duplikat
df.duplicated().sum()

#mengecek dan mengatasi missing value
df.isnull().sum()

df['Q-E'].fillna(df['Q-E'].mean(), inplace = True)
df['ZN-E'].fillna(df['ZN-E'].mean(), inplace = True)
df['DBO-E'].fillna(df['DBO-E'].mean(), inplace = True)
df['DQO-E'].fillna(df['DQO-E'].mean(), inplace = True)
df['SS-E'].fillna(df['SS-E'].mean(), inplace = True)
df['SSV-E'].fillna(df['SSV-E'].mean(), inplace = True)
df['SED-E'].fillna(df['SED-E'].mean(), inplace = True)
df['DBO-P'].fillna(df['DBO-P'].mean(), inplace = True)
df['SSV-P '].fillna(df['SSV-P '].mean(), inplace = True)
df['SED-P'].fillna(df['SED-P'].mean(), inplace = True)
df['DBO-D'].fillna(df['DBO-D'].mean(), inplace = True)
df['DQO-D'].fillna(df['DQO-D'].mean(), inplace = True)
df['SS-D'].fillna(df['SS-D'].mean(), inplace = True)
df['SSV-D'].fillna(df['SSV-D'].mean(), inplace = True)
df['SED-D'].fillna(df['SED-D'].mean(), inplace = True)
df['PH-S'].fillna(df['PH-S'].mean(), inplace = True)
df['DBO-S'].fillna(df['DBO-S'].mean(), inplace = True)
df['DQO-S'].fillna(df['DQO-S'].mean(), inplace = True)
df['SS-S'].fillna(df['SS-S'].mean(), inplace = True)
df['SSV-S'].fillna(df['SSV-S'].mean(), inplace = True)
df['SED-S'].fillna(df['SED-S'].mean(), inplace = True)
df['COND-S'].fillna(df['COND-S'].mean(), inplace = True)
df['RD-DBO-P'].fillna(df['RD-DBO-P'].mean(), inplace = True)
df['RD-SS-P'].fillna(df['RD-SS-P'].mean(), inplace = True)
df['RD-SED-P'].fillna(df['RD-SED-P'].mean(), inplace = True)
df['RD-DBO-S'].fillna(df['RD-DBO-S'].mean(), inplace = True)
df['RD-DQO-S'].fillna(df['RD-DQO-S'].mean(), inplace = True)
df['RD-DBO-G'].fillna(df['RD-DBO-G'].mean(), inplace = True)
df['RD-DQO-G'].fillna(df['RD-DQO-G'].mean(), inplace = True)
df[' RD-SS-G'].fillna(df[' RD-SS-G'].mean(), inplace = True)
df['RD-SED-G'].fillna(df['RD-SED-G'].mean(), inplace = True)

df.isnull().sum()

#normalisasi data
dfnew = df.iloc[:,1:39]
x = dfnew
newData = (x-x.min())/(x.max()-x.min())
newData

#Reduksi Dimnsi menggunakan PCA
from sklearn.decomposition import PCA
pca = PCA(n_components = 2)
pca.fit(newData)
data_pca = pca.transform(newData)
data_pca = pd.DataFrame(data_pca,columns=['PCA1','PCA2'])
data_pca

plt.scatter(data_pca.PCA1, data_pca.PCA2, color = '#8B0000')
plt.xlabel("PCA_1")
plt.ylabel("PCA_2")
plt.title('Persebaran Data pada PCA1 dan PCA2')
plt.show()

"""###Clustering K-Means"""

#euclidean distance
def distance(x1,x2,cls1,cls2):
  jarak = math.sqrt((x1-cls1)**2 +(cls2-x2)**2)
  return jarak

#Clustering K Means
import statistics
c1 = data_pca['PCA1'][0]
c3 = data_pca['PCA1'][1]
c2 = data_pca['PCA2'][0]
c4 = data_pca['PCA2'][1]

a = 1
while(True):
  print("Iterasi Ke- ",a)
  x1 = []
  y1 = []
  cen1 = {
      "PCA 1":x1,
      "PCA 2":y1,}
  point1 = pd.DataFrame(cen1)


  x2 = []
  y2 = []
  cen2 = {
      "PCA 1":x2,
      "PCA 2":y2,}
  point2 = pd.DataFrame(cen2)

  print("Centroid 1: (",c1,",",c2,")")
  print("Centroid 2: (",c3,",",c4,")")

  for j in range(len(data_pca)):
    jarak1 = distance(data_pca['PCA1'][j],data_pca['PCA2'][j],c1,c2)
    jarak2 = distance(data_pca['PCA1'][j],data_pca['PCA2'][j],c3,c4)
    if jarak1 < jarak2 :
      x1.append(data_pca['PCA1'][j])
      y1.append(data_pca['PCA2'][j])
    else:
      x2.append(data_pca['PCA1'][j])
      y2.append(data_pca['PCA2'][j]) 

  #mean
  m1 = statistics.mean(x1)
  m2 = statistics.mean(y1)

  m3 = statistics.mean(x2)
  m4 = statistics.mean(y2) 

  if(m1 == c1 and m2 == c2 and m3 == c3 and m4 == c4):
    break
  else:
    c1 = m1
    c2 = m2
    c3 = m3
    c4 = m4

  a = a + 1
  point1 = pd.DataFrame(cen1)
  print(point1)

plt.scatter(cen1['PCA 1'], cen1['PCA 2'], color = 'cyan', label='Cluster1')
plt.scatter(cen2['PCA 1'], cen2['PCA 2'], color = 'orange', label='Cluster2')
plt.title("Grafik Klasterisasi Data")
plt.legend()
plt.show()

plt.scatter(cen1['PCA 1'], cen1['PCA 2'], color = 'cyan', label='Cluster1')
plt.scatter(cen2['PCA 1'], cen2['PCA 2'], color = 'orange', label='Cluster2')
plt.scatter(c1, c2, color = 'black' , label='centroid')
plt.scatter(c3, c4, color = 'black', label='centroid')
plt.title("Grafik Klasterisasi Data")
plt.legend()
plt.show()